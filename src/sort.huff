#define function sort(uint256[] calldata) nonpayable returns(uint256[] memory)

#define macro MAIN() = takes(0) returns(0) {
    // load calldata
    0x00                                // [0]
    calldataload                        // [calldata]
    0xe0                                // [32, calldata]
    shr                                 // [function_selector]
    
    // check if sig matches
    __FUNC_SIG(sort)                    // [function_selector, sort()]
    eq                                  // [if_matches_function]
    sortJump                            // [jump_location]
    jumpi
    0x00 0x00 revert                    // []


    sortJump:
        SORT()

}


#define macro SORT() = takes(0) returns(0){
    // after loading calldata, subtract 1 from size to ignore 0x20 prefix of array
    0x01

    // read the size of the array @0x20
    0x24                                // [0x20, 1]
    calldataload                        // [size, 1]
    0x02                                // [1, size, 1]
    add                                 // [size = size + 1, 1]
    dup1                                // [size, size, 1]

    // load memory with calldata
    0x20                                // [0x20, size, size, 1]
    mul                                 // [size_offset, size, 1]
    0x04                                // [offset calldata, size_offset, size, 1]
    0x00                                // [mem, offset calldata, size_iffset, size, 1]
    calldatacopy                        // [size, 1]

    sub                                 // [size = size - 1]



    // create a  count variable
    0x02                                // [x=2, size]

    loopJump:
        // check if count == length
        dup2                                // [size, x, size]
        dup2                                // [x, size, x, size]
        eq                                  // [isEqualSize, x, size]
        endJump                             // [jumpLoc, isEqualSize, x, size]
        jumpi                               // [x, size]

        // loop ahead and swap if an element
        // is larger
        dup1                                // [y, x, size]
        SWAPLOOP()                          // [y+1, x, size]
        pop                                 // [x, size]

        // add to the count
        0x01                                // [1, x, size]
        add                                 // [x+1, size]
        loopJump                            // [loopJumpLoc, x+1, size]
        jump


    // when the loop is complete
    endJump:
        pop                                 // [size]
        0x01 add                            // [original_size]

        0x20 mul                            // [size_mem]
        0x00                                // [offset mem, size]
        return                              // []
}

#define macro SWAPLOOP() = takes(0) returns(0){
    swapLoopJump:
        // check if x > y + 1
        0x01                            // [1, y, x, size]
        add                             // [y+1, x, size]
        dup1                            // [y+1, y+1, x, size]
        MLOAD_INDEX()                   // [arr[y+1], y+1, x, size]
        dup3                            // [x, arr[y+1], y+1, x, size]
        MLOAD_INDEX()                   // [arr[x], arr[y+1], y+1, x, size]                 
        gt                              // [x>y+1, y+1, x, size]

        // if not, don't swap
        iszero                          // [!x>y+1, y+1, x, size]                          
        skipSwap                        // [swapLoc, !?, y+1, x, size]
        jumpi                           // [y+1, x, size]
        SWAP()                          // [y+1, x, size]
        skipSwap:

        dup3                            // [size, y+1, x, size]
        dup2                            // [y+1, size, y+1, x,size]
        eq                              // [y+1 == size, y+1, x, size]
        iszero                          // [y+1 != size, y+1, x, size]
        swapLoopJump                    // [jumpLoc, y+1 != size, y+1, x, size]
        jumpi                           // [y+1, x, size]
        

}

#define macro SWAP() = takes(0) returns(0){
                                            // [x, y+1, size]
        // get temp y+1 value
        dup2                                // [y+1, x, y+1, size]
        MLOAD_INDEX()                       // [a[y+1], x, y+1, size]
    
        // store x value in y+1
        dup2                                // [x, a[y+1], x, y+1, size]
        MLOAD_INDEX()                       // [a[x], a[y+1], x, y+1, size]
        dup4                                // [y+1, a[x], a[y+1], x, y+1, size]
        MSTORE_INDEX()                      // [a[y+1], x, y+1, size]

        // store temp y value in x
        dup2                                // [x, a[y+1], x, y+1, size]
        MSTORE_INDEX()                      // [x, y+1, size]
}

#define macro MLOAD_INDEX() = takes(0) returns(0){
    0x20
    mul
    mload
}

#define macro MSTORE_INDEX() = takes(0) returns(0){
    0x20
    mul
    mstore
}